{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\24011651\\\\Documents\\\\Aulas 2\\xBAAno\\\\plataformas\\\\Cursor\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\n// Configuração do axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\naxios.defaults.baseURL = API_BASE_URL;\n\n// Estados do contexto\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('token'),\n  isAuthenticated: false,\n  loading: true,\n  error: null\n};\n\n// Tipos de ações\nconst AuthActionTypes = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  REGISTER_START: 'REGISTER_START',\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\n  LOGOUT: 'LOGOUT',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  SET_LOADING: 'SET_LOADING',\n  VERIFY_TOKEN_SUCCESS: 'VERIFY_TOKEN_SUCCESS',\n  VERIFY_TOKEN_FAILURE: 'VERIFY_TOKEN_FAILURE'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AuthActionTypes.LOGIN_START:\n    case AuthActionTypes.REGISTER_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case AuthActionTypes.LOGIN_SUCCESS:\n    case AuthActionTypes.REGISTER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case AuthActionTypes.LOGIN_FAILURE:\n    case AuthActionTypes.REGISTER_FAILURE:\n    case AuthActionTypes.VERIFY_TOKEN_FAILURE:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload\n      };\n    case AuthActionTypes.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n    case AuthActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case AuthActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case AuthActionTypes.VERIFY_TOKEN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Contexto\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Provider\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Configurar token no axios\n  useEffect(() => {\n    if (state.token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${state.token}`;\n      localStorage.setItem('token', state.token);\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n      localStorage.removeItem('token');\n    }\n  }, [state.token]);\n\n  // Verificar token ao carregar a aplicação\n  useEffect(() => {\n    const verifyToken = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await axios.post('/auth/verify-token');\n          dispatch({\n            type: AuthActionTypes.VERIFY_TOKEN_SUCCESS,\n            payload: {\n              user: response.data.dados.usuario\n            }\n          });\n        } catch (error) {\n          dispatch({\n            type: AuthActionTypes.VERIFY_TOKEN_FAILURE,\n            payload: 'Token inválido'\n          });\n        }\n      } else {\n        dispatch({\n          type: AuthActionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    verifyToken();\n  }, []);\n\n  // Função de login\n  const login = async (email, senha) => {\n    dispatch({\n      type: AuthActionTypes.LOGIN_START\n    });\n    try {\n      const response = await axios.post('/auth/login', {\n        email,\n        senha\n      });\n      dispatch({\n        type: AuthActionTypes.LOGIN_SUCCESS,\n        payload: {\n          user: response.data.dados.usuario,\n          token: response.data.dados.token\n        }\n      });\n      toast.success('Login realizado com sucesso!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.mensagem) || 'Erro ao fazer login';\n      dispatch({\n        type: AuthActionTypes.LOGIN_FAILURE,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Função de registro\n  const register = async userData => {\n    dispatch({\n      type: AuthActionTypes.REGISTER_START\n    });\n    try {\n      const response = await axios.post('/auth/register', userData);\n      dispatch({\n        type: AuthActionTypes.REGISTER_SUCCESS,\n        payload: {\n          user: response.data.dados.usuario,\n          token: response.data.dados.token\n        }\n      });\n      toast.success('Conta criada com sucesso!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.mensagem) || 'Erro ao criar conta';\n      dispatch({\n        type: AuthActionTypes.REGISTER_FAILURE,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Função de logout\n  const logout = () => {\n    dispatch({\n      type: AuthActionTypes.LOGOUT\n    });\n    toast.success('Logout realizado com sucesso!');\n  };\n\n  // Função para limpar erros\n  const clearError = () => {\n    dispatch({\n      type: AuthActionTypes.CLEAR_ERROR\n    });\n  };\n\n  // Função para atualizar dados do usuário\n  const updateUser = userData => {\n    dispatch({\n      type: AuthActionTypes.VERIFY_TOKEN_SUCCESS,\n      payload: {\n        user: {\n          ...state.user,\n          ...userData\n        }\n      }\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    clearError,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook para usar o contexto\n_s(AuthProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","toast","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","defaults","baseURL","initialState","user","token","localStorage","getItem","isAuthenticated","loading","error","AuthActionTypes","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_START","REGISTER_SUCCESS","REGISTER_FAILURE","LOGOUT","CLEAR_ERROR","SET_LOADING","VERIFY_TOKEN_SUCCESS","VERIFY_TOKEN_FAILURE","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","headers","common","setItem","removeItem","verifyToken","response","post","data","dados","usuario","login","email","senha","success","_error$response","_error$response$data","errorMessage","mensagem","register","userData","_error$response2","_error$response2$data","logout","clearError","updateUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/24011651/Documents/Aulas 2ºAno/plataformas/Cursor/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport toast from 'react-hot-toast';\r\n\r\n// Configuração do axios\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\naxios.defaults.baseURL = API_BASE_URL;\r\n\r\n// Estados do contexto\r\nconst initialState = {\r\n  user: null,\r\n  token: localStorage.getItem('token'),\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\n// Tipos de ações\r\nconst AuthActionTypes = {\r\n  LOGIN_START: 'LOGIN_START',\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n  REGISTER_START: 'REGISTER_START',\r\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\r\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\r\n  LOGOUT: 'LOGOUT',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n  SET_LOADING: 'SET_LOADING',\r\n  VERIFY_TOKEN_SUCCESS: 'VERIFY_TOKEN_SUCCESS',\r\n  VERIFY_TOKEN_FAILURE: 'VERIFY_TOKEN_FAILURE'\r\n};\r\n\r\n// Reducer\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case AuthActionTypes.LOGIN_START:\r\n    case AuthActionTypes.REGISTER_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n    \r\n    case AuthActionTypes.LOGIN_SUCCESS:\r\n    case AuthActionTypes.REGISTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case AuthActionTypes.LOGIN_FAILURE:\r\n    case AuthActionTypes.REGISTER_FAILURE:\r\n    case AuthActionTypes.VERIFY_TOKEN_FAILURE:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    \r\n    case AuthActionTypes.LOGOUT:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case AuthActionTypes.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n    \r\n    case AuthActionTypes.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n    \r\n    case AuthActionTypes.VERIFY_TOKEN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Contexto\r\nconst AuthContext = createContext();\r\n\r\n// Provider\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Configurar token no axios\r\n  useEffect(() => {\r\n    if (state.token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${state.token}`;\r\n      localStorage.setItem('token', state.token);\r\n    } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n      localStorage.removeItem('token');\r\n    }\r\n  }, [state.token]);\r\n\r\n  // Verificar token ao carregar a aplicação\r\n  useEffect(() => {\r\n    const verifyToken = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        try {\r\n          const response = await axios.post('/auth/verify-token');\r\n          dispatch({\r\n            type: AuthActionTypes.VERIFY_TOKEN_SUCCESS,\r\n            payload: { user: response.data.dados.usuario }\r\n          });\r\n        } catch (error) {\r\n          dispatch({\r\n            type: AuthActionTypes.VERIFY_TOKEN_FAILURE,\r\n            payload: 'Token inválido'\r\n          });\r\n        }\r\n      } else {\r\n        dispatch({ type: AuthActionTypes.SET_LOADING, payload: false });\r\n      }\r\n    };\r\n\r\n    verifyToken();\r\n  }, []);\r\n\r\n  // Função de login\r\n  const login = async (email, senha) => {\r\n    dispatch({ type: AuthActionTypes.LOGIN_START });\r\n    \r\n    try {\r\n      const response = await axios.post('/auth/login', { email, senha });\r\n      \r\n      dispatch({\r\n        type: AuthActionTypes.LOGIN_SUCCESS,\r\n        payload: {\r\n          user: response.data.dados.usuario,\r\n          token: response.data.dados.token\r\n        }\r\n      });\r\n      \r\n      toast.success('Login realizado com sucesso!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.mensagem || 'Erro ao fazer login';\r\n      dispatch({\r\n        type: AuthActionTypes.LOGIN_FAILURE,\r\n        payload: errorMessage\r\n      });\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Função de registro\r\n  const register = async (userData) => {\r\n    dispatch({ type: AuthActionTypes.REGISTER_START });\r\n    \r\n    try {\r\n      const response = await axios.post('/auth/register', userData);\r\n      \r\n      dispatch({\r\n        type: AuthActionTypes.REGISTER_SUCCESS,\r\n        payload: {\r\n          user: response.data.dados.usuario,\r\n          token: response.data.dados.token\r\n        }\r\n      });\r\n      \r\n      toast.success('Conta criada com sucesso!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.mensagem || 'Erro ao criar conta';\r\n      dispatch({\r\n        type: AuthActionTypes.REGISTER_FAILURE,\r\n        payload: errorMessage\r\n      });\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Função de logout\r\n  const logout = () => {\r\n    dispatch({ type: AuthActionTypes.LOGOUT });\r\n    toast.success('Logout realizado com sucesso!');\r\n  };\r\n\r\n  // Função para limpar erros\r\n  const clearError = () => {\r\n    dispatch({ type: AuthActionTypes.CLEAR_ERROR });\r\n  };\r\n\r\n  // Função para atualizar dados do usuário\r\n  const updateUser = (userData) => {\r\n    dispatch({\r\n      type: AuthActionTypes.VERIFY_TOKEN_SUCCESS,\r\n      payload: { user: { ...state.user, ...userData } }\r\n    });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError,\r\n    updateUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook para usar o contexto\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}